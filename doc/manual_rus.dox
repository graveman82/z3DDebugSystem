/** @page DebugSystem Система отладки
Включение режима отладки
------------------------
В движке поддерживаются 5 уровней отладки. Для того, чтобы включить режим отладки, необходимо
определить переменную препроцессора Z3D_DEBUG_LEVEL в настройках проекта в вашей IDE 
таким образом:
Z3D_DEBUG_LEVEL=n, где n-желаемый уровень отладки. Чем выше n - тем тщательнее производится
отладка.
Проверка истинности утверждений
-------------------------------
В режиме отладки доступен инструмент, проверяющий истинность утверждений. Он работает 
следующим образом: вы пишите где-то в коде, что некоторое условие должно быть истинным
в данном блоке и если оно ложно, то всплывает сообщение о нарушении этого утверждения с
записью в лог.
Макрос для проверки истинности утверждений имеет следующий формат:
Z3D_ASSERT_LEVn(exp, fmt, ..., fPopMsg), где 
- LEV - один из следующих суффиксов:
	+ LOW
	+ MEDIUM
	+ HIGH
	+ EXTRA
	+ PARANOIC, 
которые обозначают уровни отладки, ниже которых макрос с эти именем не действует; 
- n - может отсутствовать или принимать значения от 1 до 8 и обозначает число аргументов в 
строке формата;
- exp - выражение, истинность которого утверждается;
- fmt - строка формата (в стиле printf), за которой могут идти от 1 до 8 аргументов;
- fPopMsg - булево значение, которое при true вызовет появление диалогового сообщения,
при false - будет осуществлена только запись в лог.

Пример1

@code
/* Утверждается, что файл, имя которого хранится в строке filename всегда будет открыт 
успешно.
*/
FILE* f = fopen(filename, "r");
/* Сработает только при уровне отладки не ниже Z3D_DEBUG_LEVEL_LOW, 
суффикс LOW можно не добавлять для ассертов, работающих при уровне 
отладки Z3D_DEBUG_LEVEL_LOW*/
Z3D_ASSERT1(f != 0, "File '%s' must be exist!", filename, true);
// Сработает только при уровне отладки не ниже Z3D_DEBUG_LEVEL_HIGH
Z3D_ASSERT_HIGH1(f != 0, "File '%s' must be exist!", filename, true);
@endcode

- - -

Различные режимы отладки позволяют вам разгружать код по мере того, как он
стабилизируется и проверяется. На первых порах вы можете включить уровень отладки 
Z3D_DEBUG_LEVEL_HIGH (равен 3). После того, как все основные баги будут отловлены, можно 
отключить проверку истинности утверждений, обработку ошибок, которые имели место на 
этом уровне и установить уровень отладки, равный Z3D_DEBUG_LEVEL_MEDIUM (равен 2).
Различные уровни отладки позволят вам оставить макросы в коде и выключать их, когда они не нужны.

Для записи информации в лог и консоль предусмотрен макрос Z3D_INFO. Вы можете использовать 
его для оповещения о каких-нибудь важных событиях, например, об окончании инициализации
какой-то подсистемы. Макрос имеет формат Z3D_INFOn(fmt, ...).

Для трассировки можно использовать макросы формата Z3D_TRACEn( fmt, ..., fPopMsg). Трассировка
записывает в лог имя файла и номер строки в файле, где вызвана трассировка.

Для оповещения об ошибке используются макросы формата Z3D_ERRORn( type, exp, fmt, ..., fPopMsg),
где type описывает тип ошибки. Ошибки бывают двух типов. Первый (z3D::DebugTool::kError)
нужно использовать, если приложение может продолжать свое выполнение. 
Второй тип ошибок (z3D::DebugTool::kFatal) необходимо указывать, если приложение не может 
далее продолжать свою работу. 

Движком поддерживается два уровня предупреждений, которые задаются макросом Z3D_WARN_LEVEL в 
настройках проекта в IDE. Сами предупреждения выводятся при помощи макросов формата
Z3D_WARNING_LEVn(exp, fmt, ...), где LEV один из суффиксов {,LOW,HIGH}.

Во всех перечисленных макросах вы можете передавать от 1 до 8 дополнительных аргумента 
после строки формата fmt, exp - это выражение (можно передать 0), fPopMsg - true или false в 
зависимости от необходимости всплывающих диалоговых окон с сообщением.

Пример2

@code
/* Была инициализирована какая-то подсистема.
*/
BOOL fRes = SomeSubSystem.Initialize();
if (!fRes)
{
Z3D_ERROR(z3D::DebugTool:kFatal, !fRes, "Some sub system initialization failed", true);
}
else
{
Z3D_INFO1("Subsystem %s was inited successfully!", "Some");
}
@endcode
*/


/** @defgroup z3DDebugSystem Система отладки*/